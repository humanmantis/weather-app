{"version":3,"sources":["components/WeatherDetail/WeatherDetail.js","components/WeatherCard/WeatherCard.js","actions/forecast.js","components/Search/Search.js","components/App/App.js","serviceWorker.js","reducers/forecast.js","reducers/index.js","api/forecast.js","sagas/fetchForecast.js","sagas/index.js","store.js","index.js"],"names":["WeatherDetail","this","props","city","data","className","id","date","src","day","condition","icon","alt","avgtemp_c","text","mintemp_c","maxtemp_c","daily_chance_of_rain","avghumidity","uv","astro","sunset","sunrise","PureComponent","WeatherCard","setActive","index","isActive","onClick","createActions","forecastRequest","forecastSuccess","forecastFailure","Search","state","searchValue","handleChange","event","value","target","setState","searchRequest","handleKeyPress","key","type","onChange","onKeyPress","disabled","length","Component","App","activeCard","search","forecast","error","toLocaleUpperCase","map","card","i","mapDispatchToProps","connect","Boolean","window","location","hostname","match","handleActions","toString","_state","action","payload","forecastday","isLoading","combineReducers","fetch","then","response","json","call","getForecast","result","put","takeLatest","fetchForecast","sagaMiddleware","createSagaMiddleware","store","initialState","createStore","rootReducer","compose","applyMiddleware","__REDUX_DEVTOOLS_EXTENSION__","run","rootSaga","getStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.747dcfef.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\";\r\nimport \"./WeatherDetail.css\";\r\n\r\nclass WeatherDetail extends PureComponent {\r\n  render() {\r\n    const { city, data } = this.props;\r\n\r\n    // waiting data loading\r\n    if (!data) {\r\n      return <h3 className=\"info\">Almost ready...</h3>;\r\n    }\r\n    return (\r\n      <div className=\"weather-detail\">\r\n        <h3>Weather in {city}</h3>\r\n        <div className=\"weather-detail-container\">\r\n          <div className=\"weather-detail-container-sm\">\r\n            <p className=\"weather-detail-text\" id=\"date\">\r\n              {data.date}\r\n            </p>\r\n            <img\r\n              src={data.day.condition.icon}\r\n              alt=\"Condition icon\"\r\n              className=\"weather-detail-icon\"\r\n            />\r\n            <h3 className=\"weather-detail-temp\" id=\"temp\">\r\n              {data.day.avgtemp_c}째C\r\n            </h3>\r\n            <p className=\"weather-detail-text\" id=\"condition\">\r\n            {data.day.condition.text}\r\n            </p>\r\n          </div>\r\n          <div className=\"weather-detail-container-lg\">\r\n            <h3 className=\"weather-detail-title\">Day detail</h3>\r\n            <div className=\"weather-detail-group\">\r\n              <div className=\"weather-detail-block\">\r\n                <p className=\"weather-detail-text\">\r\n                  Min temperature: <span id=\"mintemp\">{data.day.mintemp_c}째C</span>\r\n                </p>\r\n                <p className=\"weather-detail-text\">\r\n                  Max temperature: <span id=\"maxntemp\">{data.day.maxtemp_c}째C</span>\r\n                </p>\r\n              </div>\r\n              <div className=\"weather-detail-block\">\r\n                <p className=\"weather-detail-text\">\r\n                  Chance of rain: <span id=\"rain\">{data.day.daily_chance_of_rain}%</span>\r\n                </p>\r\n                <p className=\"weather-detail-text\">\r\n                  Humidity: <span id=\"humidity\">{data.day.avghumidity}%</span>\r\n                </p>\r\n                <p className=\"weather-detail-text\">\r\n                  UV index: <span id=\"uv\">{data.day.uv}</span>\r\n                </p>\r\n              </div>\r\n              <div className=\"weather-detail-block\">\r\n                <p className=\"weather-detail-text\">\r\n                  Sunset: <span id=\"sunset\">{data.astro.sunset}</span>\r\n                </p>\r\n                <p className=\"weather-detail-text\">\r\n                  Sunrise: <span id=\"sunrise\">{data.astro.sunrise}</span>\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WeatherDetail;\r\n","import React, { PureComponent } from \"react\";\r\nimport \"./WeatherCard.css\";\r\n\r\nclass WeatherCard extends PureComponent {\r\n\r\n  // set active card\r\n  setActive = () => {\r\n    this.props.setActive(this.props.index)\r\n  }\r\n  render() {\r\n\r\n    const {date, condition, avgtemp_c, isActive} = this.props;\r\n    return (\r\n      <div className={\"weather-card \" + (isActive ? \"active\" : \"\")} onClick={this.setActive}>\r\n        <p className=\"weather-card-text\" id=\"date\">\r\n          {date}\r\n        </p>\r\n        <img src={condition && condition.icon} alt={condition && condition.text} className=\"weather-card-icon\"/>\r\n        <h3 className=\"weather-cart-temp\">{avgtemp_c}째C</h3>\r\n        <p className=\"weather-cart-text\" id=\"condition\">\r\n          {condition && condition.text}\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WeatherCard;\r\n","import { createActions } from \"redux-actions\";\r\n\r\nexport const { forecastRequest, forecastSuccess, forecastFailure } = createActions(\r\n  \"FORECAST_REQUEST\",\r\n  \"FORECAST_SUCCESS\",\r\n  \"FORECAST_FAILURE\"\r\n);","import React, { Component } from \"react\";\r\nimport \"./Search.css\";\r\n\r\nclass Search extends Component {\r\n  state = {\r\n    searchValue: \"\",\r\n  };\r\n\r\n  // change searcValue in state from input\r\n  handleChange = (event) => {\r\n    const { value } = event.target;\r\n    this.setState((state) => ({ ...state, searchValue: value }));\r\n  };\r\n\r\n  // run search\r\n  searchRequest = () => {\r\n    this.props.searchRequest(this.state.searchValue);\r\n  };\r\n\r\n  // search by press Enter\r\n  handleKeyPress = (event) => {\r\n    const { key } = event;\r\n    if (key === \"Enter\") this.searchRequest();\r\n  };\r\n\r\n  render() {\r\n    const { searchValue } = this.state;\r\n    return (\r\n      <div className=\"search-panel\">\r\n        <div className=\"search\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"search-input\"\r\n            value={searchValue}\r\n            onChange={this.handleChange}\r\n            onKeyPress={this.handleKeyPress}\r\n          />\r\n          <button\r\n            className=\"search-btn\"\r\n            onClick={this.searchRequest}\r\n            disabled={searchValue.length === 0}\r\n          >\r\n            Search\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Search;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./App.css\";\r\nimport WeatherDetail from \"../WeatherDetail/WeatherDetail\";\r\nimport WeatherCard from \"../WeatherCard/WeatherCard\";\r\nimport { forecastRequest } from \"../../actions/forecast\";\r\nimport Search from \"../Search\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    activeCard: 0,\r\n    search: \"\",\r\n  };\r\n\r\n  // default city\r\n  componentDidMount() {\r\n    this.props.forecastRequest(\"Chernivtsi\");\r\n  }\r\n\r\n  // change active card\r\n  setActive = (index) => {\r\n    this.setState((state) => ({ ...state, activeCard: index }));\r\n  };\r\n\r\n  // get forecast from search value\r\n  searchRequest = (value) => {\r\n    this.props.forecastRequest(value);\r\n    this.setState((state) => ({ ...state, activeCard: 0 }));\r\n  };\r\n\r\n  render() {\r\n    const { activeCard } = this.state;\r\n    const { data, city, error } = this.props.forecast;\r\n\r\n    // waiting data loading\r\n    if (!data) {\r\n      return <h3 className=\"info\">Loading...</h3>;\r\n    }\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <Search searchRequest={this.searchRequest} />\r\n        {error ? (\r\n          <h3 className=\"info\">No matching location found.</h3>\r\n        ) : (\r\n          <div className=\"forecast\">\r\n            <WeatherDetail data={data[activeCard]} city={city.toLocaleUpperCase()} />\r\n            <div className=\"forecast-cards\">\r\n              {data.map((card, i) => {\r\n                return (\r\n                  <WeatherCard\r\n                    key={i}\r\n                    index={i}\r\n                    date={card.date}\r\n                    condition={card.day.condition}\r\n                    avgtemp_c={card.day.avgtemp_c}\r\n                    isActive={activeCard === i}\r\n                    setActive={this.setActive}\r\n                  />\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = { forecastRequest };\r\nconst mapStateToProps = (state) => ({\r\n  forecast: state.forecast,\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { handleActions } from \"redux-actions\";\r\nimport { combineReducers } from \"redux\";\r\nimport { forecastRequest, forecastSuccess, forecastFailure } from \"../actions/forecast\";\r\n\r\nconst city = handleActions({\r\n    [forecastRequest.toString()]: (_state, action) => action.payload\r\n}, '')\r\n\r\nconst data = handleActions({\r\n    [forecastSuccess.toString()]: (_state, action) => action.payload.forecast.forecastday\r\n}, []);\r\n\r\nconst isLoading = handleActions({\r\n    [forecastRequest.toString()]: () => true,\r\n    [forecastSuccess.toString()]: () => false,\r\n    [forecastFailure.toString()]: () => false\r\n}, false)\r\n\r\nconst error = handleActions({\r\n    [forecastFailure.toString()]: () => true,\r\n    [forecastSuccess.toString()]: () => false\r\n}, false)\r\n\r\nexport const forecast = combineReducers({\r\n  city,\r\n  data,\r\n  isLoading,\r\n  error,\r\n});\r\n","import { combineReducers } from \"redux\";\r\nimport { forecast } from \"./forecast\";\r\n\r\n\r\nexport default combineReducers({\r\n    forecast,\r\n})\r\n","export default (city) => {\r\n  return fetch(\r\n    `https://api.weatherapi.com/v1/forecast.json?key=5243339d81f541c2bbd104505200505&q=${city}&days=3`\r\n  ).then((response) => response.json());\r\n};\r\n","import { put, call } from \"redux-saga/effects\";\r\nimport getForecast from \"../api/forecast\";\r\nimport {\r\n  forecastSuccess,\r\n  forecastFailure,\r\n} from \"../actions/forecast\";\r\n\r\nexport default function* (action) {\r\n  try {\r\n    const result = yield call(getForecast, action.payload);\r\n    yield put(forecastSuccess(result));\r\n  } catch (error) {\r\n    yield put(forecastFailure(error));\r\n  }\r\n}\r\n","import { takeLatest } from 'redux-saga/effects';\r\nimport fetchForecast from './fetchForecast';\r\nimport { forecastRequest } from '../actions/forecast';\r\n\r\nexport default function* () {\r\n    yield takeLatest(forecastRequest.toString(), fetchForecast);\r\n}","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport rootReducer from \"./reducers\";\r\nimport rootSaga from \"./sagas\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nexport default (initialState) => {\r\n  const store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    compose(\r\n      applyMiddleware(sagaMiddleware),\r\n      window.__REDUX_DEVTOOLS_EXTENSION__ &&\r\n        window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    )\r\n  );\r\n  sagaMiddleware.run(rootSaga);\r\n  return store;\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./components/App\";\r\nimport { Provider } from \"react-redux\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport getStore from './store';\r\n\r\n\r\nconst store = getStore();\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}